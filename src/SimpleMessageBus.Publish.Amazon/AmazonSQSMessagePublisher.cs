using Amazon.SQS;
using Amazon.SQS.Model;
using CloudNimble.SimpleMessageBus.Amazon.Core;
using CloudNimble.SimpleMessageBus.Core;
using Microsoft.Extensions.Options;
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;

namespace CloudNimble.SimpleMessageBus.Publish.Amazon
{

    /// <summary>
    /// Manages the process of publishing MessageBus messages to Amazon SQS.
    /// </summary>
    /// <remarks>
    /// This publisher integrates with Amazon SQS to provide reliable, scalable message queuing
    /// in AWS environments. It handles message serialization, queue URL resolution, and
    /// supports both standard and FIFO queues depending on configuration.
    /// </remarks>
    public class AmazonSQSMessagePublisher : IMessagePublisher
    {

        #region Private Members

        private readonly AmazonSQSOptions _options;
        private readonly IAmazonSQS _sqsClient;
        private string _queueUrl;

        #endregion

        #region Properties

        /// <summary>
        /// The URL of the SQS queue this publisher will write to.
        /// </summary>
        internal string QueueUrl
        {
            get
            {
                _queueUrl ??= GetQueueUrl(_options.QueueName).GetAwaiter().GetResult();
                return _queueUrl;
            }
        }

        #endregion

        #region Constructors

        /// <summary>
        /// Creates a new instance of the <see cref="AmazonSQSMessagePublisher"/>.
        /// </summary>
        /// <param name="options">The <see cref="AmazonSQSOptions"/> instance to use to configure Amazon SQS. Should be registered with your Dependency Injection container.</param>
        /// <param name="sqsClient">The <see cref="IAmazonSQS"/> client instance.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="options"/> is <see langword="null" /> or
        /// <paramref name="sqsClient"/> is <see langword="null" />.
        /// </exception>
        /// <exception cref="ArgumentException">
        /// <paramref name="options"/>.QueueName is <see langword="null" /> or whitespace.
        /// </exception>
        public AmazonSQSMessagePublisher(IOptions<AmazonSQSOptions> options, IAmazonSQS sqsClient)
        {
            ArgumentNullException.ThrowIfNull(options, nameof(options));
            ArgumentNullException.ThrowIfNull(sqsClient, nameof(sqsClient));
            ArgumentException.ThrowIfNullOrWhiteSpace(options.Value.QueueName, nameof(options.Value.QueueName));
            
            _options = options.Value;
            _sqsClient = sqsClient;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Publishes the specified <see cref="IMessage"/> to a queue.
        /// </summary>
        /// <param name="message">The <see cref="IMessage"/> to wrap in a <see cref="MessageEnvelope"/> and publish to the queue.</param>
        /// <param name="isSystemGenerated">Specifies whether or not the event was generated by the system. (Not currently used).</param>
        /// <returns>A <see cref="Task"/> reference for the asynchronous function.</returns>
        public async Task PublishAsync(IMessage message, bool isSystemGenerated = false)
        {
            if (QueueUrl is null)
            {
                throw new InvalidOperationException("The Queue URL could not be determined. Ensure the queue exists and try again.");
            }

            var envelope = new MessageEnvelope(message);
            
            var sendRequest = new SendMessageRequest
            {
                QueueUrl = QueueUrl,
                MessageBody = JsonSerializer.Serialize(envelope)
            };

            if (_options.UseFifo && !string.IsNullOrWhiteSpace(_options.MessageGroupId))
            {
                sendRequest.MessageGroupId = _options.MessageGroupId;
                
                if (_options.UseContentBasedDeduplication)
                {
                    sendRequest.MessageDeduplicationId = Guid.NewGuid().ToString();
                }
            }

            await _sqsClient.SendMessageAsync(sendRequest).ConfigureAwait(false);
        }

        #endregion

        #region Internal Methods

        /// <summary>
        /// Gets or creates the SQS queue URL.
        /// </summary>
        /// <param name="queueName">The name of the queue.</param>
        /// <returns>The queue URL.</returns>
        internal async Task<string> GetQueueUrl(string queueName)
        {
            try
            {
                var response = await _sqsClient.GetQueueUrlAsync(queueName).ConfigureAwait(false);
                return response.QueueUrl;
            }
            catch (QueueDoesNotExistException)
            {
                var createRequest = new CreateQueueRequest
                {
                    QueueName = queueName
                };

                if (_options.UseFifo)
                {
                    createRequest.Attributes = new Dictionary<string, string>
                    {
                        ["FifoQueue"] = "true"
                    };
                    
                    if (_options.UseContentBasedDeduplication)
                    {
                        createRequest.Attributes["ContentBasedDeduplication"] = "true";
                    }
                }

                var createResponse = await _sqsClient.CreateQueueAsync(createRequest).ConfigureAwait(false);
                Console.WriteLine($"Queue created: '{queueName}'");
                return createResponse.QueueUrl;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"AmazonSQSMessagePublisher Error: {ex.Message}");
                throw;
            }
        }

        #endregion

    }

}